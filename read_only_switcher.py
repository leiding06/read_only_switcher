# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReadOnlySwitcher
                                 A QGIS plugin
 Read-Only Switcher lets you toggle the read-only flag for one or more selected layers directly from the Layers panel, saving you the step of opening Project Properties.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Lei Ding
        email                : lleidding@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.utils import iface
from qgis.PyQt.QtGui import QIcon

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .read_only_switcher_dialog import ReadOnlySwitcherDialog
import os.path


class ReadOnlySwitcher:
    """The plugin class."""

    def __init__(self, iface):
        """Constructor."""
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ReadOnlySwitcher_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Read-Only Switcher')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ReadOnlySwitcher', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            pass
            #self.iface.addPluginToMenu(
             #   self.menu,
              #  action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/read_only_switcher/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Read-only switcher'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Read-Only Switcher'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """ Switch the read-only status between editable and read-only for selected layers from layer tree"""

        # No initial dialog for this plugin, but kept for potential future update
        '''
        if self.first_start == True:
            self.first_start = False
            self.dlg = ReadOnlySwitcherDialog()

        # show the dialog - kept for future update
        self.dlg.show()
        # Run the dialog event loop - kept for future update
        result = self.dlg.exec_()
        
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
        '''
        try:
            # Check if there is 'Selected layer'
            selected_layers = iface.layerTreeView().selectedLayers()
            if not selected_layers:
                QMessageBox.warning(None, "Warning", "No layers selected!")
                return
            read_only_statuses = {layer.readOnly() for layer in selected_layers}
        except Exception as e:
                QMessageBox.critical(None, "Error", f"Operation failed: {str(e)}")


        # If selected layers share different status, treat all as editable and switch to 'Read-only', safety concern.
        all_read_only = read_only_statuses.pop()

        for layer in selected_layers:
            layer.setReadOnly(not all_read_only)

        
        # Build the message dynamically
        if all_read_only:
            previous_state = "read-only"
        else:
            previous_state = "editable"
            
        
        layer_count = len(selected_layers)
        message = (
            f"Successfully changed {layer_count} layer{'s' if layer_count != 1 else ''}:\n"
            f"- Previous state: {previous_state}\n"
            f"- New state: {'read-only' if not all_read_only else 'editable'}\n\n"
        )

        # Add note about mixed states if needed
        if len(read_only_statuses) > 1:  
            message += (
                "Note: Some layers had different read-only states initially.\n"
                "All selected layers were standardized to the new state."
            )


        msg = QMessageBox(
            QMessageBox.Information,
            "Layer Status Updated",  # More concise title
            message,
            QMessageBox.Ok,
            parent=iface.mainWindow()  
        )
        msg.exec_()